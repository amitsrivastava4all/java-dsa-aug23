class Solution {
     public TreeNode buildTree(int[] inorder, int[] postorder) {
        Map<Integer,Integer> map = new HashMap<Integer , Integer>();
        for(int i=0;i<inorder.length;i++){
            map.put(inorder[i],i);
}
        TreeNode node = buildTree(postorder,inorder,0,postorder.length-1,0,inorder.length-1,map);
        return node;
        
        
    }
    
    public TreeNode buildTree(int[] postorder,int[] inorder,int pStart, int pEnd,int iStart,int iEnd,Map<Integer,Integer> map){
        if(pStart > pEnd || iStart > iEnd) return null;
        TreeNode root = new TreeNode(postorder[pEnd]);
        int inRoot = map.get(root.val);
        int left = inRoot - iStart;
        
       root.left =  buildTree(postorder,inorder,pStart,pStart + left - 1,iStart,inRoot-1,map);
       root.right = buildTree(postorder,inorder,pStart + left,pEnd-1,inRoot+1,iEnd,map);
       return root;
}
}
