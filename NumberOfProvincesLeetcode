class Solution {
    public void dfs(int node , ArrayList<ArrayList<Integer>> adj,boolean[] vis){
        vis[node] = true;
        for(Integer i : adj.get(node)){
            if(vis[i] == false){
                dfs(i,adj,vis);
            }
        }
    }

    public int findCircleNum(int[][] isConnected) {
        int n = isConnected.length;
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i=0;i<=n;i++){
           adj.add(new ArrayList<Integer>()); 
        }

        for(int i=0;i<n;i++){
            for(int j = 0;j<n;j++){
                if(isConnected[i][j] == 1 && i!=j){
                    adj.get(i+1).add(j+1);
                }
            }
        }

        boolean vis[] = new boolean[n+1];
        int count = 0;

        for(int i=1;i<=n;i++){
            if(vis[i] == false){
                dfs(i,adj,vis);
                count++;
            }
        }
        return count;





    }
}
