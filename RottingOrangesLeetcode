class Pair{
    int row;
    int col;
    int time;
    Pair(int row,int col , int time){
        this.row = row;
        this.col = col;
        this.time = time;
    }
}
class Solution {
    public int orangesRotting(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;

        Queue<Pair> q = new LinkedList<>();
        int vis[][] = new int[n][m];
        int fresh = 0;
        for(int row=0;row<n;row++){
            for(int col=0;col<m;col++){
                if(grid[row][col] == 2){
                    q.add(new Pair(row,col,0));
                    vis[row][col] = 1;
                }
                else{
                    vis[row][col] = 0;
                }
                if(grid[row][col] ==  1) fresh++; 
            }
        }

        int time = 0;
        int directions[][] = {{1,0},{0,1},{-1,0},{0,-1}};
        int count = 0;

        while(!q.isEmpty()){
            int r = q.peek().row;
            int c = q.peek().col;
            int t = q.peek().time;
            time = Math.max(time,t);
            q.remove();
            for(int i=0;i<directions.length;i++){
                int nrow = r + directions[i][0];
                int ncol = c + directions[i][1];
                if(nrow >=0 && nrow < n && ncol >=0 && ncol <m && vis[nrow][ncol] == 0 && grid[nrow][ncol] == 1){
                    q.add(new Pair(nrow,ncol,t+1));
                    vis[nrow][ncol] = 1;
                    count++;
                }
            }
        }

        if(count != fresh) return -1;
        return time;


    }
}
